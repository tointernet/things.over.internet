// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protofiles/ex_services.proto

package toi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IotPersistenceClient is the client API for IotPersistence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IotPersistenceClient interface {
	GetIotData(ctx context.Context, in *GetIotDataRequest, opts ...grpc.CallOption) (*GetIotDataResponse, error)
}

type iotPersistenceClient struct {
	cc grpc.ClientConnInterface
}

func NewIotPersistenceClient(cc grpc.ClientConnInterface) IotPersistenceClient {
	return &iotPersistenceClient{cc}
}

func (c *iotPersistenceClient) GetIotData(ctx context.Context, in *GetIotDataRequest, opts ...grpc.CallOption) (*GetIotDataResponse, error) {
	out := new(GetIotDataResponse)
	err := c.cc.Invoke(ctx, "/toi.IotPersistence/GetIotData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IotPersistenceServer is the server API for IotPersistence service.
// All implementations should embed UnimplementedIotPersistenceServer
// for forward compatibility
type IotPersistenceServer interface {
	GetIotData(context.Context, *GetIotDataRequest) (*GetIotDataResponse, error)
}

// UnimplementedIotPersistenceServer should be embedded to have forward compatible implementations.
type UnimplementedIotPersistenceServer struct {
}

func (UnimplementedIotPersistenceServer) GetIotData(context.Context, *GetIotDataRequest) (*GetIotDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIotData not implemented")
}

// UnsafeIotPersistenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IotPersistenceServer will
// result in compilation errors.
type UnsafeIotPersistenceServer interface {
	mustEmbedUnimplementedIotPersistenceServer()
}

func RegisterIotPersistenceServer(s grpc.ServiceRegistrar, srv IotPersistenceServer) {
	s.RegisterService(&IotPersistence_ServiceDesc, srv)
}

func _IotPersistence_GetIotData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIotDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotPersistenceServer).GetIotData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toi.IotPersistence/GetIotData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotPersistenceServer).GetIotData(ctx, req.(*GetIotDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IotPersistence_ServiceDesc is the grpc.ServiceDesc for IotPersistence service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IotPersistence_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toi.IotPersistence",
	HandlerType: (*IotPersistenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIotData",
			Handler:    _IotPersistence_GetIotData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/ex_services.proto",
}
